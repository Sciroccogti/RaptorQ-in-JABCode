// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Binding to JABCode
class JABCode {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  JABCode(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  JABCode.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<jab_encode> createEncode(
    int color_number,
    int symbol_number,
  ) {
    return _createEncode(
      color_number,
      symbol_number,
    );
  }

  late final _createEncodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<jab_encode> Function(
              jab_int32, jab_int32)>>('createEncode');
  late final _createEncode =
      _createEncodePtr.asFunction<ffi.Pointer<jab_encode> Function(int, int)>();

  void destroyEncode(
    ffi.Pointer<jab_encode> enc,
  ) {
    return _destroyEncode(
      enc,
    );
  }

  late final _destroyEncodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<jab_encode>)>>(
          'destroyEncode');
  late final _destroyEncode =
      _destroyEncodePtr.asFunction<void Function(ffi.Pointer<jab_encode>)>();

  int generateJABCode(
    ffi.Pointer<jab_encode> enc,
    ffi.Pointer<jab_data> data,
  ) {
    return _generateJABCode(
      enc,
      data,
    );
  }

  late final _generateJABCodePtr = _lookup<
      ffi.NativeFunction<
          jab_int32 Function(ffi.Pointer<jab_encode>,
              ffi.Pointer<jab_data>)>>('generateJABCode');
  late final _generateJABCode = _generateJABCodePtr.asFunction<
      int Function(ffi.Pointer<jab_encode>, ffi.Pointer<jab_data>)>();

  ffi.Pointer<jab_data> decodeJABCode(
    ffi.Pointer<jab_bitmap> bitmap,
    int mode,
    ffi.Pointer<jab_int32> status,
  ) {
    return _decodeJABCode(
      bitmap,
      mode,
      status,
    );
  }

  late final _decodeJABCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<jab_data> Function(ffi.Pointer<jab_bitmap>, jab_int32,
              ffi.Pointer<jab_int32>)>>('decodeJABCode');
  late final _decodeJABCode = _decodeJABCodePtr.asFunction<
      ffi.Pointer<jab_data> Function(
          ffi.Pointer<jab_bitmap>, int, ffi.Pointer<jab_int32>)>();

  ffi.Pointer<jab_data> decodeJABCodeEx(
    ffi.Pointer<jab_bitmap> bitmap,
    int mode,
    ffi.Pointer<jab_int32> status,
    ffi.Pointer<jab_decoded_symbol> symbols,
    int max_symbol_number,
  ) {
    return _decodeJABCodeEx(
      bitmap,
      mode,
      status,
      symbols,
      max_symbol_number,
    );
  }

  late final _decodeJABCodeExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<jab_data> Function(
              ffi.Pointer<jab_bitmap>,
              jab_int32,
              ffi.Pointer<jab_int32>,
              ffi.Pointer<jab_decoded_symbol>,
              jab_int32)>>('decodeJABCodeEx');
  late final _decodeJABCodeEx = _decodeJABCodeExPtr.asFunction<
      ffi.Pointer<jab_data> Function(ffi.Pointer<jab_bitmap>, int,
          ffi.Pointer<jab_int32>, ffi.Pointer<jab_decoded_symbol>, int)>();

  int saveImage(
    ffi.Pointer<jab_bitmap> bitmap,
    ffi.Pointer<jab_char> filename,
  ) {
    return _saveImage(
      bitmap,
      filename,
    );
  }

  late final _saveImagePtr = _lookup<
      ffi.NativeFunction<
          jab_boolean Function(
              ffi.Pointer<jab_bitmap>, ffi.Pointer<jab_char>)>>('saveImage');
  late final _saveImage = _saveImagePtr.asFunction<
      int Function(ffi.Pointer<jab_bitmap>, ffi.Pointer<jab_char>)>();

  int saveImageCMYK(
    ffi.Pointer<jab_bitmap> bitmap,
    int isCMYK,
    ffi.Pointer<jab_char> filename,
  ) {
    return _saveImageCMYK(
      bitmap,
      isCMYK,
      filename,
    );
  }

  late final _saveImageCMYKPtr = _lookup<
      ffi.NativeFunction<
          jab_boolean Function(ffi.Pointer<jab_bitmap>, jab_boolean,
              ffi.Pointer<jab_char>)>>('saveImageCMYK');
  late final _saveImageCMYK = _saveImageCMYKPtr.asFunction<
      int Function(ffi.Pointer<jab_bitmap>, int, ffi.Pointer<jab_char>)>();

  ffi.Pointer<jab_bitmap> readImage(
    ffi.Pointer<jab_char> filename,
  ) {
    return _readImage(
      filename,
    );
  }

  late final _readImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<jab_bitmap> Function(
              ffi.Pointer<jab_char>)>>('readImage');
  late final _readImage = _readImagePtr
      .asFunction<ffi.Pointer<jab_bitmap> Function(ffi.Pointer<jab_char>)>();

  void reportError(
    ffi.Pointer<jab_char> message,
  ) {
    return _reportError(
      message,
    );
  }

  late final _reportErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<jab_char>)>>(
          'reportError');
  late final _reportError =
      _reportErrorPtr.asFunction<void Function(ffi.Pointer<jab_char>)>();

  ffi.Pointer<ffi.Char> jab_data2char(
    ffi.Pointer<jab_data> data,
  ) {
    return _jab_data2char(
      data,
    );
  }

  late final _jab_data2charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<jab_data>)>>('jab_data2char');
  late final _jab_data2char = _jab_data2charPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<jab_data>)>();
}

/// @brief 2-dimensional integer vector
class jab_vector2d extends ffi.Struct {
  @jab_int32()
  external int x;

  @jab_int32()
  external int y;
}

typedef jab_int32 = ffi.Int;

/// @brief 2-dimensional float vector
class jab_point extends ffi.Struct {
  @jab_float()
  external double x;

  @jab_float()
  external double y;
}

typedef jab_float = ffi.Float;

/// @brief Data structure
class jab_data extends ffi.Struct {
  @jab_int32()
  external int length;

  @ffi.Array.multi([1])
  external ffi.Array<jab_char> data;
}

typedef jab_char = ffi.Char;

/// @brief Code bitmap
class jab_bitmap extends ffi.Struct {
  @jab_int32()
  external int width;

  @jab_int32()
  external int height;

  @jab_int32()
  external int bits_per_pixel;

  @jab_int32()
  external int bits_per_channel;

  @jab_int32()
  external int channel_count;

  @ffi.Array.multi([1])
  external ffi.Array<jab_byte> pixel;
}

typedef jab_byte = ffi.UnsignedChar;

/// @brief Symbol parameters
class jab_symbol extends ffi.Struct {
  @jab_int32()
  external int index;

  external jab_vector2d side_size;

  @jab_int32()
  external int host;

  @ffi.Array.multi([4])
  external ffi.Array<jab_int32> slaves;

  @ffi.Array.multi([2])
  external ffi.Array<jab_int32> wcwr;

  external ffi.Pointer<jab_data> data;

  external ffi.Pointer<jab_byte> data_map;

  external ffi.Pointer<jab_data> metadata;

  external ffi.Pointer<jab_byte> matrix;
}

/// @brief Encode parameters
class jab_encode extends ffi.Struct {
  @jab_int32()
  external int color_number;

  @jab_int32()
  external int symbol_number;

  @jab_int32()
  external int module_size;

  @jab_int32()
  external int master_symbol_width;

  @jab_int32()
  external int master_symbol_height;

  /// < Palette holding used module colors in format RGB
  external ffi.Pointer<jab_byte> palette;

  external ffi.Pointer<jab_vector2d> symbol_versions;

  external ffi.Pointer<jab_byte> symbol_ecc_levels;

  external ffi.Pointer<jab_int32> symbol_positions;

  /// < Pointer to internal representation of JAB Code symbols
  external ffi.Pointer<jab_symbol> symbols;

  external ffi.Pointer<jab_bitmap> bitmap;
}

/// @brief Decoded metadata
class jab_metadata extends ffi.Struct {
  @jab_boolean()
  external int default_mode;

  @jab_byte()
  external int Nc;

  @jab_byte()
  external int mask_type;

  @jab_byte()
  external int docked_position;

  external jab_vector2d side_version;

  external jab_vector2d ecl;
}

typedef jab_boolean = ffi.UnsignedChar;

/// @brief Decoded symbol
class jab_decoded_symbol extends ffi.Struct {
  @jab_int32()
  external int index;

  @jab_int32()
  external int host_index;

  @jab_int32()
  external int host_position;

  external jab_vector2d side_size;

  @jab_float()
  external double module_size;

  @ffi.Array.multi([4])
  external ffi.Array<jab_point> pattern_positions;

  external jab_metadata metadata;

  @ffi.Array.multi([4])
  external ffi.Array<jab_metadata> slave_metadata;

  external ffi.Pointer<jab_byte> palette;

  external ffi.Pointer<jab_data> data;
}

const String VERSION = '2.0.0';

const String BUILD_DATE = 'Jul 13 2022';

const int MAX_SYMBOL_NUMBER = 61;

const int MAX_COLOR_NUMBER = 256;

const int MAX_SIZE_ENCODING_MODE = 256;

const int JAB_ENCODING_MODES = 6;

const int ENC_MAX = 1000000;

const int NUMBER_OF_MASK_PATTERNS = 8;

const int DEFAULT_SYMBOL_NUMBER = 1;

const int DEFAULT_MODULE_SIZE = 12;

const int DEFAULT_COLOR_NUMBER = 8;

const int DEFAULT_MODULE_COLOR_MODE = 2;

const int DEFAULT_ECC_LEVEL = 3;

const int DEFAULT_MASKING_REFERENCE = 7;

const int DISTANCE_TO_BORDER = 4;

const int MAX_ALIGNMENT_NUMBER = 9;

const int COLOR_PALETTE_NUMBER = 4;

const int BITMAP_BITS_PER_PIXEL = 32;

const int BITMAP_BITS_PER_CHANNEL = 8;

const int BITMAP_CHANNEL_COUNT = 4;

const int JAB_SUCCESS = 1;

const int JAB_FAILURE = 0;

const int NORMAL_DECODE = 0;

const int COMPATIBLE_DECODE = 1;
